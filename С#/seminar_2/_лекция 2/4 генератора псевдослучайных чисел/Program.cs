//до этого мы указывали значение массива вручную 
//сейчас используем генератор псевдослучайных чисел с использованием методов
//потренируем то, каким образом можно взять, метод, передать в него массив 
//и заполнить массив нужным количеством элементов. 

//На следующем этапе опишем метод, который будет выводить все элементы по порядку. 
//Затем превратим наш код поиска нужного индекса в метод. 

//определим новый массив - int[] array 
//укажем, что в этом массиве будет по умолчанию 10 элементов - [10]
//new int [10] - дословно означает «создай новый массив, где будет 10 элементов»
//По умолчанию он будет наполнен нулями.  
int[] array = new int[10]; 
//Чтобы заполнить массив случайными числами, воспользуемся методом, который опишем сами
//начнём с ключевого слова void 
//дадим наименование методу FillArray
//в качестве аргумента будет приниматься какая-то коллекция, то есть аргумент collection 
void FillArray(int[] collection) 
{ 
    int length = collection.Length; //надо получить длину массива. Делается это посредством collection.Length
    int index = 0; //возьмём позицию index, которая по умолчанию будет начинаться с 0 
    while (index < length) 
    {          
        collection[index] = new Random().Next(1, 10); //обращаемся к аргументу collection на позицию index
        //и положим туда новое случайное целое число из диапозана 1-10
        //index = index + 1;          
        index++; 
    } 
} 
//если в аргументе вместо collection записать условный array и запустить проект, 
//Visual Studio Code сразу покажет потенциальные ошибки. 

void PrintArray(int[] col) //сделаем метод void, который будет печатать массив
//Аналогичным образом в качестве аргумента здесь будет приходить массив. 
//Обратите внимание, мы специально не даём одинаковые имена, чтобы привыкнуть называть разные аргументы различными именами. 
//Количество элементов обозначим таким образом: 
{
  int count = col.Length; 
  int position = 0; //обозначим текущую позицию не через именование перемен index, а через position 
    while (position < count); //пока позиция меньше, чем количество, повторять цикл и выводить на экран
    {
      Console.WriteLine(col[position]); //вывод значения текущего элемента, то есть col[position] 
      position++; 
    }
}

//Теперь разберёмся, для чего используется ключевое слово void. 
//Дело в том, что в контексте языка С# есть методы, которые могут возвращать или не возвращать какие-то значения. 
//Если метод ничего не возвращает, он называется void-методом. 
//Обратите внимание, что в этом случае в коде оператор return, отвечающий за поиск максимума из 3, не используется. 

//напишем FillArray и в качестве аргумента передадим наименование нашего массива. 
//Затем вызовем следующий метод PrintArray, который будет распечатывать наш массив. 
//Запускаем и видим, что нет Run. Обычно код запускается со второго раза, 
//но иногда бывают исключения, и он срабатывает с первого. 
//Итак, сначала мы определили массив из 10 элементов. 
//Далее вызвали метод FillArray, который заполнил массив, 
//а отдельный метод PrintArray нам его распечатал. 
//В нашем случае это выглядит так: 
FillArray(array); 
PrintArray(array); 
//Если перезапустим наш пример, то с вероятностью 100% у нас появится новый набор чисел. 
//Затем будет ещё один набор чисел, и так далее. 